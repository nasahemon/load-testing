from locust import HttpUser, TaskSet, task, between

# class UserBehavior(TaskSet):
#     @task
#     def test_api(self):
#         # Replace with your API endpoint and payload
#         self.client.get("/api/v1/resource")

# # class WebsiteUser(HttpUser):
# #     tasks = [UserBehavior]
# #     wait_time = between(1, 5)  # Simulates user think time (1 to 5 seconds)

# class WebsiteUser(HttpUser):
#     # wait_time = between(0,0.001)  # User waits between 1-2 seconds between requests

#     @task
#     def test_api(self):
#         # Log start of the request
#         print("Sending GET request to /api/v1/resource...")
        
#         # Send the request and wait for the response
#         response = self.client.get("/api/v1/resource")

#         # Log the response to confirm it's received before the next request
#         if response.status_code == 200:
#             print(f"GET Response received: {response.json()}")
#         else:
#             print(f"GET failed with status code: {response.status_code}")



class UserBehavior(TaskSet):
    @task
    def face_detect(self):
        self.client.get(
            url='/face/detect',
            params={
                'filePath': '/mnt/012_19922617289000218_P.jpg',
                'location': 'true',
                'compare': 'true'
            },
            headers={'accept': 'application/json'}
        )

    # @task
    # def face_detect_post(self):
    #     with open('/home/hasan/Downloads/test1.jpg', 'rb') as file:
    #         self.client.post(
    #             url='/face/detect/v2',
    #             headers={
    #                 'accept': 'application/json',
    #                 # 'Content-Type': 'multipart/form-data'
    #             },
    #             files={'file': ('test1.jpg', file, 'image/jpeg')}
    #         )
class WebsiteUser(HttpUser):
    tasks = [UserBehavior]
    # wait_time = between(1, 5)
    # host = 'http://172.16.7.82:4102'
    host = 'http://172.16.7.124:4102'
# 


# class UserBehavior(TaskSet):


#     @task
#     def face_match_post(self):
#         payload = {
#             "faceId1": [
#                 -0.1809755563735962, 0.091155506670475, 0.01707044430077076, -0.013032912276685238,
#                 -0.0206418689340353, 0.011159291490912437, 0.005678460001945496, -0.11152082681655884,
#                 0.08462383598089218, -0.07005038112401962, 0.2199070304632187, -0.01644936390221119,
#                 -0.21141068637371063, -0.07290717214345932, -0.03425396606326103, 0.06838568300008774,
#                 -0.24099071323871613, -0.17587880790233612, 0.004228487145155668, -0.051019202917814255,
#                 0.07106005400419235, -0.02012883499264717, -0.06059012934565544, 0.05706608295440674,
#                 -0.19890888035297394, -0.27473530173301697, -0.0687117949128151, -0.12250906229019165,
#                 0.11069422960281372, -0.07952386140823364, 0.10169261693954468, -0.046739671379327774,
#                 -0.20096862316131592, 0.020264938473701477, 0.0077556646429002285, 0.04669579118490219,
#                 -0.05048651248216629, -0.006006444804370403, 0.20437727868556976, -0.03401615843176842,
#                 -0.16094449162483215, 0.03461560979485512, 0.004206328187137842, 0.31129828095436096,
#                 0.131484255194664, 0.0885298028588295, -0.025974959135055542, -0.08324477076530457,
#                 0.07427449524402618, -0.24207349121570587, -0.00045256278826855123, 0.1878136545419693,
#                 0.10495752096176147, 0.05063817650079727, -0.028878668323159218, -0.1849428117275238,
#                 0.04040418937802315, 0.07389072328805923, -0.261915385723114, 0.10173095762729645,
#                 0.02265697531402111, -0.11842616647481918, 0.04240867495536804, 0.006225339137017727,
#                 0.20766042172908783, 0.03862355649471283, -0.16331391036510468, -0.1046399250626564,
#                 0.17585398256778717, -0.17633536458015442, -0.0025629298761487007, 0.08529836684465408,
#                 -0.04536786302924156, -0.2247324436903, -0.2606792151927948, 0.05648791790008545,
#                 0.4402591288089752, 0.14360958337783813, -0.13055653870105743, 0.0531405471265316,
#                 -0.0797252207994461, 0.005844575352966785, 0.09772392362356186, 0.10511366277933121,
#                 -0.10753460228443146, -0.08471659570932388, -0.09157591313123703, 0.0312217827886343,
#                 0.15070396661758423, 0.03039952926337719, -0.057842522859573364, 0.13228414952754974,
#                 -0.013172769919037819, 0.020340286195278168, 0.03771630674600601, 0.05541959032416344,
#                 -0.13336479663848877, 0.014511900953948498, -0.02508149854838848, 0.00958790723234415,
#                 -0.025402812287211418, -0.05000821873545647, 0.06723978370428085, 0.1495319902896881,
#                 -0.10865854471921921, 0.2206106185913086, 0.015371540561318398, -0.036949463188648224,
#                 -0.015966633334755898, 0.06600605696439743, -0.07061242312192917, -0.019938383251428604,
#                 0.09974070638418198, -0.33110642433166504, 0.27413398027420044, 0.19691000878810883,
#                 0.024214167147874832, 0.17423509061336517, 0.08024940639734268, 0.03743996471166611,
#                 -0.035987310111522675, 0.02928197756409645, -0.1932823210954666, -0.08004456013441086,
#                 0.004677282180637121, -0.09401903301477432, 0.1324196457862854, -0.024386970326304436
#             ],
#             "faceId2": [
#                 -0.1809755563735962, 0.091155506670475, 0.01707044430077076, -0.013032912276685238,
#                 -0.0206418689340353, 0.011159291490912437, 0.005678460001945496, -0.11152082681655884,
#                 0.08462383598089218, -0.07005038112401962, 0.2199070304632187, -0.01644936390221119,
#                 -0.21141068637371063, -0.07290717214345932, -0.03425396606326103, 0.06838568300008774,
#                 -0.24099071323871613, -0.17587880790233612, 0.004228487145155668, -0.051019202917814255,
#                 0.07106005400419235, -0.02012883499264717, -0.06059012934565544, 0.05706608295440674,
#                 -0.19890888035297394, -0.27473530173301697, -0.0687117949128151, -0.12250906229019165,
#                 0.11069422960281372, -0.07952386140823364, 0.10169261693954468, -0.046739671379327774,
#                 -0.20096862316131592, 0.020264938473701477, 0.0077556646429002285, 0.04669579118490219,
#                 -0.05048651248216629, -0.006006444804370403, 0.20437727868556976, -0.03401615843176842,
#                 -0.16094449162483215, 0.03461560979485512, 0.004206328187137842, 0.31129828095436096,
#                 0.131484255194664, 0.0885298028588295, -0.025974959135055542, -0.08324477076530457,
#                 0.07427449524402618, -0.24207349121570587, -0.00045256278826855123, 0.1878136545419693,
#                 0.10495752096176147, 0.05063817650079727, -0.028878668323159218, -0.1849428117275238,
#                 0.04040418937802315, 0.07389072328805923, -0.261915385723114, 0.10173095762729645,
#                 0.02265697531402111, -0.11842616647481918, 0.04240867495536804, 0.006225339137017727,
#                 0.20766042172908783, 0.03862355649471283, -0.16331391036510468, -0.1046399250626564,
#                 0.17585398256778717, -0.17633536458015442, -0.0025629298761487007, 0.08529836684465408,
#                 -0.04536786302924156, -0.2247324436903, -0.2606792151927948, 0.05648791790008545,
#                 0.4402591288089752, 0.14360958337783813, -0.13055653870105743, 0.0531405471265316,
#                 -0.0797252207994461, 0.005844575352966785, 0.09772392362356186, 0.10511366277933121,
#                 -0.10753460228443146, -0.08471659570932388, -0.09157591313123703, 0.0312217827886343,
#                 0.15070396661758423, 0.03039952926337719, -0.057842522859573364, 0.13228414952754974,
#                 -0.013172769919037819, 0.020340286195278168, 0.03771630674600601, 0.05541959032416344,
#                 -0.13336479663848877, 0.014511900953948498, -0.02508149854838848, 0.00958790723234415,
#                 -0.025402812287211418, -0.05000821873545647, 0.06723978370428085, 0.1495319902896881,
#                 -0.10865854471921921, 0.2206106185913086, 0.015371540561318398, -0.036949463188648224,
#                 -0.015966633334755898, 0.06600605696439743, -0.07061242312192917, -0.019938383251428604,
#                 0.09974070638418198, -0.33110642433166504, 0.27413398027420044, 0.19691000878810883,
#                 0.024214167147874832, 0.17423509061336517, 0.08024940639734268, 0.03743996471166611,
#                 -0.035987310111522675, 0.02928197756409645, -0.1932823210954666, -0.08004456013441086,
#                 0.004677282180637121, -0.09401903301477432, 0.1324196457862854, -0.024386970326304436
#             ]
#         }
#         self.client.post(
#             url='/face/match',
#             headers={
#                 'accept': 'application/json',
#                 'Content-Type': 'application/json'
#             },
#             json=payload
#         )

# class WebsiteUser(HttpUser):
#     tasks = [UserBehavior]
#     # wait_time = between(1, 5)
#     host = 'http://172.16.7.82:4102'